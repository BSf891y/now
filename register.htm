<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - Crypto Trading Platform</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Your existing CSS styles */
        /* ... */
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="back-btn">
                <i class="fas fa-chevron-left"></i>
            </div>
            <div class="header-title">Register</div>
        </div>

        <!-- Register Form -->
        <div class="register-section">
            <form id="register-form">
                <!-- Your existing form fields -->
                <!-- ... -->
                
                <button type="submit" class="register-btn">
                    <div class="register-btn-content">
                        <span>Register</span>
                        <div class="spinner" id="register-spinner"></div>
                    </div>
                </button>
            </form>
            
            <!-- Debug Panel -->
            <div class="debug-panel" id="debug-panel" style="display: none;">
                <div class="debug-title">Debug Information</div>
                <div>Status: <span id="debug-status">Ready</span></div>
                <div>Last Request: <span id="debug-request">None</span></div>
                <div>Last Response: <span id="debug-response">None</span></div>
                <div class="debug-log" id="debug-log" style="font-family: monospace; white-space: pre-wrap; max-height: 200px; overflow-y: auto; background-color: #333; color: #fff; padding: 10px; border-radius: 5px; margin-top: 10px;"></div>
            </div>
        </div>
    </div>

    <script>
        // Google Apps Script Web App URL - Make sure this is correct
        const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyEDbkAyiIJy89_FZKCyoxXXQrs5avD0vk10iKZA_f_vNN2PBuvGGZLOKnwSoS3fZ4xfw/exec';
        
        // Debug logging function
        function logDebug(message) {
            const debugLog = document.getElementById('debug-log');
            const timestamp = new Date().toLocaleTimeString();
            debugLog.textContent += `[${timestamp}] ${message}\n`;
            debugLog.scrollTop = debugLog.scrollHeight;
            console.log(message);
        }
        
        // Show debug panel (press Shift+D to show)
        document.addEventListener('keydown', function(e) {
            if (e.shiftKey && e.key === 'D') {
                document.getElementById('debug-panel').style.display = 'block';
            }
        });
        
        // Back button functionality
        document.querySelector('.back-btn').addEventListener('click', function() {
            window.location.href = 'login.html';
        });
        
        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(function(toggle, index) {
            toggle.addEventListener('click', function() {
                const passwordInput = index === 0 ? document.getElementById('password') : document.getElementById('confirm-password');
                const eyeIcon = this.querySelector('i');
                
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    eyeIcon.classList.remove('fa-eye');
                    eyeIcon.classList.add('fa-eye-slash');
                } else {
                    passwordInput.type = 'password';
                    eyeIcon.classList.remove('fa-eye-slash');
                    eyeIcon.classList.add('fa-eye');
                }
            });
        });
        
        // Form validation and submission
        document.getElementById('register-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Reset error messages
            document.querySelectorAll('.error-message').forEach(function(el) {
                el.style.display = 'none';
            });
            
            // Get form values
            const username = document.getElementById('username').value.trim();
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();
            const confirmPassword = document.getElementById('confirm-password').value.trim();
            const referredBy = document.getElementById('referral-code').value.trim();
            const termsChecked = document.getElementById('terms-checkbox').checked;
            
            // Validate form
            let isValid = true;
            
            if (!username) {
                document.getElementById('username-error').textContent = 'Username is required';
                document.getElementById('username-error').style.display = 'block';
                isValid = false;
            }
            if (!email) {
                document.getElementById('email-error').textContent = 'Email is required';
                document.getElementById('email-error').style.display = 'block';
                isValid = false;
            }
            if (!password) {
                document.getElementById('password-error').textContent = 'Password is required';
                document.getElementById('password-error').style.display = 'block';
                isValid = false;
            }
            if (password !== confirmPassword) {
                document.getElementById('confirm-password-error').textContent = 'Passwords do not match';
                document.getElementById('confirm-password-error').style.display = 'block';
                isValid = false;
            }
            if (!termsChecked) {
                document.getElementById('terms-error').textContent = 'You must agree to the Terms and Conditions';
                document.getElementById('terms-error').style.display = 'block';
                isValid = false;
            }
            
            if (!isValid) return;
            
            // Show spinner while submitting
            document.getElementById('register-spinner').style.display = 'block';
            
            // Try both methods - first with JSON, then with FormData if that fails
            
            // Method 1: JSON
            tryJsonRegistration(username, email, password, referredBy);
        });
        
        function tryJsonRegistration(username, email, password, referredBy) {
            // Prepare data as JSON
            const jsonData = {
                action: 'register',
                username: username,
                email: email,
                password: password,
                referredBy: referredBy
            };
            
            logDebug("Sending JSON registration request: " + JSON.stringify(jsonData));
            
            // Send JSON request
            fetch(SCRIPT_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                logDebug("Response status: " + response.status);
                return response.text();
            })
            .then(text => {
                logDebug("Response text: " + text);
                
                try {
                    const data = JSON.parse(text);
                    handleRegistrationResponse(data);
                } catch (e) {
                    logDebug("JSON parse error: " + e.message);
                    // If JSON parsing fails, try FormData method
                    tryFormDataRegistration(username, email, password, referredBy);
                }
            })
            .catch(error => {
                logDebug("Fetch error: " + error.message);
                // If fetch fails, try FormData method
                tryFormDataRegistration(username, email, password, referredBy);
            });
        }
        
        function tryFormDataRegistration(username, email, password, referredBy) {
            // Prepare form data
            const formData = new FormData();
            formData.append('action', 'register');
            formData.append('username', username);
            formData.append('email', email);
            formData.append('password', password);
            formData.append('referredBy', referredBy);
            
            logDebug("Sending FormData registration request");
            
            // Send FormData request
            fetch(SCRIPT_URL, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                logDebug("Response status: " + response.status);
                return response.text();
            })
            .then(text => {
                logDebug("Response text: " + text);
                
                try {
                    const data = JSON.parse(text);
                    handleRegistrationResponse(data);
                } catch (e) {
                    logDebug("JSON parse error: " + e.message);
                    // If both methods fail, show error
                    document.getElementById('register-spinner').style.display = 'none';
                    alert("Registration failed. Please try again later.");
                }
            })
            .catch(error => {
                logDebug("Fetch error: " + error.message);
                document.getElementById('register-spinner').style.display = 'none';
                alert("Registration failed. Please try again later.");
            });
        }
        
        function handleRegistrationResponse(data) {
            // Hide spinner
            document.getElementById('register-spinner').style.display = 'none';
            
            if (data.status === 'success') {
                // Registration successful
                alert("Registration successful! Please log in with your new account.");
                window.location.href = 'login.html?registered=true';
            } else {
                // Registration failed
                alert(data.message || "Registration failed. Please try again.");
            }
        }
    </script>
</body>
</html>
